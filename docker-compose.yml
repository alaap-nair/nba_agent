version: '3.8'

services:
  # NBA Agent Web Application
  nba-agent:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: nba-agent-app
    ports:
      - "8501:8501"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - NBA_AGENT_LOG_LEVEL=INFO
      - LOG_FORMAT=json
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      # Add your API keys via .env file or environment
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - JUDGMENT_API_KEY=${JUDGMENT_API_KEY:-}
      - JUDGMENT_ORG_ID=${JUDGMENT_ORG_ID:-}
    volumes:
      - ./cache:/app/cache
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - nba-agent-network

  # Development version with hot reload
  nba-agent-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: nba-agent-dev
    ports:
      - "8501:8501"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - NBA_AGENT_LOG_LEVEL=DEBUG
      - LOG_FORMAT=colored
      - DEVELOPMENT_MODE=true
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - JUDGMENT_API_KEY=${JUDGMENT_API_KEY:-}
      - JUDGMENT_ORG_ID=${JUDGMENT_ORG_ID:-}
    volumes:
      - .:/app
      - /app/.venv  # Exclude virtual environment
      - /app/__pycache__  # Exclude Python cache
      - /app/.git  # Exclude git
    working_dir: /app
    command: streamlit run apps/app.py --server.port=8501 --server.address=0.0.0.0 --server.fileWatcherType=poll
    restart: unless-stopped
    networks:
      - nba-agent-network
    profiles:
      - dev

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: nba-agent-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - nba-agent-network
    profiles:
      - cache

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: nba-agent-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - nba-agent
    restart: unless-stopped
    networks:
      - nba-agent-network
    profiles:
      - production

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: nba-agent-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - nba-agent-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: nba-agent-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - nba-agent-network
    profiles:
      - monitoring

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  nba-agent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 